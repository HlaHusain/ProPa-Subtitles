0:00:00.480,0:00:05.760
Hello, in this task we are going to formulate
some Prolog queries and rules, but before we

0:00:05.760,0:00:09.840
get started with that let's have a quick look at
the fact base that we're going to be working with.

0:00:09.840,0:00:16.960
We have predicates for female, male, and child
which define these concepts basically, for these

0:00:16.960,0:00:23.600
values here, for these names. Child is special
here because this is a binary predicate, with a

0:00:23.600,0:00:28.960
reading direction to it, and the task
tells us that this should be read as X

0:00:28.960,0:00:33.280
being the chield of Y, so this should read
as lisa being the child of anna, mary being

0:00:33.280,0:00:38.160
the chield of juliet et cetera, and not the other
way around. This is important for us because

0:00:39.120,0:00:47.360
otherwise if we just switch these we would get
vastly different results down here in our queries,

0:00:48.400,0:00:53.920
that we're going to write in a moment.
So keeping that in mind, we can actually

0:00:54.880,0:00:59.920
start with loading this into an interactive Prolog
prompt, I've already written the command in here,

0:01:00.880,0:01:04.800
and now we can actually start writing a
couple of queries in here; So we can do

0:01:05.360,0:01:12.400
'male(X).' for example and pressing enter once,
and then semicolon to iterate through all the

0:01:12.400,0:01:18.400
different possible substitutions, we can see
Prolog returns us all the substitutes for X,

0:01:18.400,0:01:23.760
so all the values for which the predicate
'male' would return true and this corresponds to

0:01:24.320,0:01:32.880
the names in our fact base, obviously. And we
can actually use this interactive prompt to

0:01:32.880,0:01:37.760
solve the task for us, or at least work out the
correct solutions, we're going to do this for the

0:01:37.760,0:01:44.560
first couple ones and then we're just gonna
write them down directly. So actually going

0:01:44.560,0:01:49.600
to the task here, the first part of the task is
'Formulate Prolog queries for: sons of juliet,

0:01:50.640,0:01:54.480
brothers of any female person including
half-brothers, persons with a daughter

0:01:54.480,0:01:59.600
and a son, and persons with a father that is
not Harry'. So we're starting with the first

0:01:59.600,0:02:04.560
one obviously for son, we're looking for a
male person so we can write it like this,

0:02:05.120,0:02:08.720
then using a comma for an 'and'
we can add a second predicate,

0:02:10.000,0:02:14.160
which should be child because we are
looking for sons of a specific person so

0:02:15.600,0:02:21.920
we're going to look for the same child but for the
parent we're going to insert 'juliet', so this is

0:02:21.920,0:02:28.800
our first query; We are asking prolog does there
exist a substitution for X for which the predicate

0:02:28.800,0:02:36.160
'male' returns true and the predicate 'child(X,
juliet)' returns true, and trying that out... and

0:02:36.160,0:02:40.560
once again we click through this with semicolon,
we can see a couple of names, luke and peter,

0:02:40.560,0:02:45.600
and if we wanted to we could go into our fact
base and check if this is true, but this is true.

0:02:48.640,0:02:54.640
So this is our first query done and
we can write it down here as 'a'

0:02:55.680,0:03:03.840
with the parameter 'X' and just copy
our query from over here basically...

0:03:08.800,0:03:11.840
We are specifically not just copying this

0:03:11.840,0:03:17.840
in here like so, because this would
not compile, so we wouldn't be able to

0:03:19.440,0:03:26.640
load this file if we did that, so we're writing it
as a rule. Now moving on to the second one we're

0:03:26.640,0:03:31.840
looking for brothers of any female person,
so once again we're looking for a 'male',

0:03:34.880,0:03:36.400
we're looking for an X...

0:03:39.680,0:03:44.880
who is the child of some parent, that
we're gonna use the parameter Z for,

0:03:45.520,0:03:48.640
and then we are going to look for a female person,

0:03:50.800,0:03:56.480
'female(Y)' and then we are once again asking for
child, but then we're going to ask for a 'Y' that

0:03:56.480,0:04:01.680
has the same parent, so we are using the
same parameter for the parent over here,

0:04:02.880,0:04:10.160
and checking this out once again we get a couple
of different answers here, and all of these

0:04:10.160,0:04:19.040
X's are the brothers that we are looking for.
You can see luke repeats over here for example,

0:04:19.040,0:04:24.640
this is because both parents are listed
the mother and the father are listed here

0:04:24.640,0:04:32.400
so luke is going to come up twice, but this is
fine for now and once again copying this over...

0:04:35.120,0:04:41.840
writing it as a rule again, we're
gonna just write the same thing here;

0:04:48.240,0:04:49.920
And that's our second query.

0:04:52.240,0:04:57.040
Now moving on to the third query we're
looking for persons with a daughter and son,

0:04:57.040,0:05:00.960
we're just going to write this directly
in here and then test it out later.

0:05:04.960,0:05:11.040
This time we are looking for parents, first
let's just start with looking for a child

0:05:12.320,0:05:18.480
Y and a parent X, and well X is the parent
that we're looking at so reading this the

0:05:18.480,0:05:23.840
other way around we're looking for a
parent of child Y for which the child is

0:05:24.480,0:05:34.080
female and another child of the same
parent, and this child should be male,

0:05:35.520,0:05:41.280
so this is the same parent here the parent that
we're looking at, and once he has a child that's

0:05:41.280,0:05:47.600
male and once he or she has a child that is
female, so a person but the daughter and son.

0:05:50.640,0:05:57.520
Moving on to the fourth query, persons with a
father that is not Harry, this is going to add a

0:05:57.520,0:06:06.880
new element for us that we haven't used yet. Once
again we're looking for a child and a father Y,

0:06:08.000,0:06:14.160
father obviously needs to be male,
and we're adding a special case

0:06:14.960,0:06:21.920
if the substitution would be Harry then we
don't want this to return true, so we are

0:06:21.920,0:06:29.600
negating that case here and that's the
first part of the task done. Now if we

0:06:29.600,0:06:35.840
save this and consult our file again
we can actually use these queries...

0:06:41.840,0:06:48.320
and we can see we get a return of lisa,
sandra, and paul, and if we check this out, so

0:06:48.320,0:06:50.880
once again we're looking for a person
with a father that is not harry,

0:06:51.760,0:06:57.520
lisa doesn't seem to... well we
basically only look at the cases

0:06:57.520,0:07:02.880
for which the parent is harry so, are these
three people in here? mary, luke, and peter,

0:07:03.680,0:07:09.280
we have lisa's on that part so they're not
in here so it returns correct, hopefully.

0:07:11.680,0:07:15.680
Okay moving on to the second part
of the task, this time we are

0:07:15.680,0:07:18.240
defining rules for general concepts,

0:07:20.320,0:07:25.280
we need to define these as binary predicates and
the concepts that we're defining are going to be

0:07:25.280,0:07:32.160
'mother', 'brother', 'uncle' and 'grandson';
So what does it mean to be a mother basically,

0:07:33.920,0:07:38.720
for a fact that we're looking for, since this
needs to be a binary predicate, this is going to

0:07:38.720,0:07:49.520
read as X being the mother of Y, so we're looking
for a female X obviously because it's going to

0:07:49.520,0:07:58.560
be mother, and this mother has a child which is
going to be Y and X is the parent. Pretty simple

0:07:58.560,0:08:06.640
basically this is just our query from 'a' just
changed up a little bit to define this concept.

0:08:08.240,0:08:13.440
Moving on to 'brother', once again
reading this as X being the brother of Y,

0:08:14.640,0:08:20.480
I guess you could read this the other
way around as well, X needs to be male,

0:08:24.720,0:08:30.800
X needs to be child of some parent Z,
and we're looking for a second child

0:08:31.760,0:08:40.800
which we're going to call Y, of the same parent,
and now we need to ask: okay this is going

0:08:40.800,0:08:45.920
to return us a couple of different people but
what do we want to exclude from here? Obviously

0:08:46.880,0:08:55.680
this might return the same person, the same value
could be substituted into Y and X, and obviously

0:08:55.680,0:09:02.640
we don't want that, you're not the brother of
yourself so we need to exclude the case where X

0:09:02.640,0:09:10.480
is Y, so once again negating that case over
here, we have defined the concept of brother.

0:09:13.600,0:09:25.600
Moving on to 'uncle(X, Y)', once again reading as
X being the uncle of Y, we need to ask logically

0:09:26.640,0:09:34.080
what does it mean, what is an uncle? Your
uncle is the brother of one of your parents,

0:09:35.120,0:09:41.280
so obviously we're going to be asking the same
question as in 'brother' again, but instead of

0:09:41.280,0:09:49.520
defining all of these once again, we can actually
just go ahead and use our defined concept of

0:09:49.520,0:10:01.280
brother, so we are asking is X brother of Z, this
is the other person, and does this Z have a child

0:10:01.280,0:10:09.920
Y, so using the concept that we already
defined we vastly simplified this query.

0:10:12.640,0:10:22.400
And lastly we are going to define 'grandson',
once again reading as X being the grandson of Y.

0:10:26.560,0:10:36.080
Obviously for X to be a grandson X is going to be
male, and X is going to be the child of a Z and

0:10:38.720,0:10:46.560
this current Z is going to be the child of
our parameter Y, because we're looking for

0:10:47.200,0:10:56.480
a grandparent basically in our Y over here,
and that's the concept of grandson defined.

0:10:58.640,0:11:06.160
Now once again we can save this and consult our
file again, and just if we wanted to try out our

0:11:07.200,0:11:15.040
queries again, just checking for all the different
variables that can be substituted substituted

0:11:15.040,0:11:26.320
in here, or we can do more complex queries
for example we could ask... Let's just try

0:11:26.960,0:11:38.400
'is harry the uncle of peter?' and we get false,
okay so that's not true, but we could use this to

0:11:39.200,0:11:49.440
try out if we want to, and yeah
this basically solves the task.
